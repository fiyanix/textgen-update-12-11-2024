// Character maps and patterns
const asciiPatterns: { [key: string]: string[] } = {
  'A': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà'],
  'B': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
  'C': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà    ‚ñà', '‚ñà     ', '‚ñà    ‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
  'D': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
  'E': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
  'F': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà     ', '‚ñà     '],
  'G': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà     ', '‚ñà  ‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
  'H': ['‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà'],
  'I': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
  'J': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '   ‚ñà  ', '   ‚ñà  ', '‚ñà  ‚ñà  ', ' ‚ñà‚ñà   '],
  'K': ['‚ñà   ‚ñà ', '‚ñà  ‚ñà  ', '‚ñà‚ñà‚ñà   ', '‚ñà  ‚ñà  ', '‚ñà   ‚ñà '],
  'L': ['‚ñà     ', '‚ñà     ', '‚ñà     ', '‚ñà     ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà'],
  'M': ['‚ñà    ‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà ‚ñà‚ñà ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà'],
  'N': ['‚ñà    ‚ñà', '‚ñà‚ñà   ‚ñà', '‚ñà ‚ñà  ‚ñà', '‚ñà  ‚ñà ‚ñà', '‚ñà   ‚ñà‚ñà'],
  'O': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
  'P': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà     ', '‚ñà     '],
  'Q': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà  ‚ñà ‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
  'R': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà    ‚ñà', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '‚ñà  ‚ñà  ', '‚ñà   ‚ñà '],
  'S': [' ‚ñà‚ñà‚ñà‚ñà ', '‚ñà     ', ' ‚ñà‚ñà‚ñà‚ñà ', '     ‚ñà', '‚ñà‚ñà‚ñà‚ñà  '],
  'T': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
  'U': ['‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', ' ‚ñà‚ñà‚ñà‚ñà '],
  'V': ['‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà    ‚ñà', ' ‚ñà  ‚ñà ', '  ‚ñà‚ñà  '],
  'W': ['‚ñà    ‚ñà', '‚ñà    ‚ñà', '‚ñà ‚ñà‚ñà ‚ñà', '‚ñà‚ñà  ‚ñà‚ñà', '‚ñà    ‚ñà'],
  'X': ['‚ñà    ‚ñà', ' ‚ñà  ‚ñà ', '  ‚ñà‚ñà  ', ' ‚ñà  ‚ñà ', '‚ñà    ‚ñà'],
  'Y': ['‚ñà    ‚ñà', ' ‚ñà  ‚ñà ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  ', '  ‚ñà‚ñà  '],
  'Z': ['‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà', '    ‚ñà ', '  ‚ñà   ', ' ‚ñà    ', '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà']
};

// Mirror text mapping
const mirrorMap: { [key: string]: string } = {
  'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù',
  'f': '…ü', 'g': '∆É', 'h': '…•', 'i': '·¥â', 'j': '…æ',
  'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o',
  'p': 'd', 'q': 'b', 'r': '…π', 's': 's', 't': ' á',
  'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é',
  'z': 'z', 'A': '‚àÄ', 'B': 'B', 'C': '∆Ü', 'D': 'D',
  'E': '∆é', 'F': '‚Ñ≤', 'G': '◊§', 'H': 'H', 'I': 'I',
  'J': '≈ø', 'K': 'K', 'L': 'À•', 'M': 'W', 'N': 'N',
  'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': 'R', 'S': 'S',
  'T': '‚î¥', 'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X',
  'Y': '‚ÖÑ', 'Z': 'Z', '0': '0', '1': '∆ñ', '2': '·ÑÖ',
  '3': '∆ê', '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•',
  '8': '8', '9': '6', '.': 'Àô', ',': '\'', '\'': ',',
  '"': '‚Äû', '`': ',', '?': '¬ø', '!': '¬°', '[': ']',
  ']': '[', '(': ')', ')': '(', '{': '}', '}': '{',
  '<': '>', '>': '<', '&': '‚Öã', '_': '‚Äæ'
};

// Small caps mapping
const smallCapsMap: { [key: string]: string } = {
  'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á',
  'f': '“ì', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
  'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è',
  'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ',
  'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è',
  'z': '·¥¢'
};

// Bubble text mapping
const bubbleMap: { [key: string]: string } = {
  'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî',
  'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò', 'j': '‚ìô',
  'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû',
  'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°', 's': '‚ì¢', 't': '‚ì£',
  'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®',
  'z': '‚ì©', 'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ',
  'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ', 'I': '‚íæ',
  'J': '‚íø', 'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ',
  'O': '‚ìÑ', 'P': '‚ìÖ', 'Q': '‚ìÜ', 'R': '‚ìá', 'S': '‚ìà',
  'T': '‚ìâ', 'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç',
  'Y': '‚ìé', 'Z': '‚ìè', '0': '‚ì™', '1': '‚ë†', '2': '‚ë°',
  '3': '‚ë¢', '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶',
  '8': '‚ëß', '9': '‚ë®'
};

// Circle text mapping (filled variant)
const circleFilledMap: { [key: string]: string } = {
  'a': 'üÖê', 'b': 'üÖë', 'c': 'üÖí', 'd': 'üÖì', 'e': 'üÖî',
  'f': 'üÖï', 'g': 'üÖñ', 'h': 'üÖó', 'i': 'üÖò', 'j': 'üÖô',
  'k': 'üÖö', 'l': 'üÖõ', 'm': 'üÖú', 'n': 'üÖù', 'o': 'üÖû',
  'p': 'üÖü', 'q': 'üÖ†', 'r': 'üÖ°', 's': 'üÖ¢', 't': 'üÖ£',
  'u': 'üÖ§', 'v': 'üÖ•', 'w': 'üÖ¶', 'x': 'üÖß', 'y': 'üÖ®',
  'z': 'üÖ©', 'A': 'üÖê', 'B': 'üÖë', 'C': 'üÖí', 'D': 'üÖì',
  'E': 'üÖî', 'F': 'üÖï', 'G': 'üÖñ', 'H': 'üÖó', 'I': 'üÖò',
  'J': 'üÖô', 'K': 'üÖö', 'L': 'üÖõ', 'M': 'üÖú', 'N': 'üÖù',
  'O': 'üÖû', 'P': 'üÖü', 'Q': 'üÖ†', 'R': 'üÖ°', 'S': 'üÖ¢',
  'T': 'üÖ£', 'U': 'üÖ§', 'V': 'üÖ•', 'W': 'üÖ¶', 'X': 'üÖß',
  'Y': 'üÖ®', 'Z': 'üÖ©'
};

// Glitch character sets
const glitchChars = ['Ã∏', 'Ã∑', 'Ã∂', 'Ãµ', 'Ã¥', 'Ã≥', 'Ã≤', 'Ã±', 'Ã∞', 'ÃØ', 'ÃÆ', 'Ã≠', 'Ã¨', 'Ã´', 'Ã™', 'Ã©', 'Ã®', 'Ãß', 'Ã¶', 'Ã•'];
const zalgoMarks = {
  above: ['Ãç', 'Ãé', 'ÃÑ', 'ÃÖ', 'Ãø', 'Ãë', 'ÃÜ', 'Ãê', 'Õí', 'Õó', 'Õë', 'Ãá', 'Ãà', 'Ãä', 'ÕÇ', 'Ãì', 'ÃàÃÅ', 'Õä', 'Õã', 'Õå'],
  middle: ['Ãï', 'Ãõ', 'ÃÄ', 'ÃÅ', 'Õò', 'Ã°', 'Ã¢', 'Ãß', 'Ã®', 'Ã¥', 'Ãµ', 'Ã∂', 'Õú', 'Õù', 'Õû', 'Õü', 'Õ†', 'Õ¢', 'Ã∏', 'Ã∑'],
  below: ['Ãñ', 'Ãó', 'Ãò', 'Ãô', 'Ãú', 'Ãù', 'Ãû', 'Ãü', 'Ã†', 'Ã§', 'Ã•', 'Ã¶', 'Ã©', 'Ã™', 'Ã´', 'Ã¨', 'Ã≠', 'ÃÆ', 'ÃØ', 'Ã∞']
};

export const toBigText = (text: string, size: 'medium' | 'big' = 'big'): string => {
  const lines: string[] = ['', '', '', '', ''];
  const chars = text.toUpperCase().split('');
  
  chars.forEach(char => {
    const pattern = asciiPatterns[char] || Array(5).fill('      ');
    pattern.forEach((line, i) => {
      lines[i] += line + (size === 'big' ? '  ' : ' ');
    });
  });
  
  return lines.join('\n');
};

export const toAsciiArt = (text: string): string[] => {
  const result: string[] = [];
  const chars = text.toUpperCase().split('');
  
  chars.forEach(char => {
    const pattern = asciiPatterns[char] || Array(5).fill('      ');
    pattern.forEach((line, i) => {
      if (!result[i]) result[i] = '';
      result[i] += line;
    });
  });
  
  return result;
};

export const mirrorText = (text: string): string => {
  return text
    .split('')
    .map(char => mirrorMap[char] || char)
    .reverse()
    .join('');
};

export const toSmallCaps = (text: string): string => {
  return text
    .toLowerCase()
    .split('')
    .map(char => smallCapsMap[char] || char)
    .join('');
};

export const toBubbleText = (text: string): string => {
  return text
    .split('')
    .map(char => bubbleMap[char] || char)
    .join('');
};

export const toCircleText = (text: string, style: 'outlined' | 'filled' = 'outlined'): string => {
  const map = style === 'outlined' ? bubbleMap : circleFilledMap;
  return text
    .split('')
    .map(char => map[char] || char)
    .join('');
};

export const reverseText = (text: string): string => {
  return text.split('').reverse().join('');
};

export const invertText = (text: string): string => {
  return mirrorText(text);
};

export const toGlitchText = (text: string, intensity: number = 2): string => {
  if (!text) return '';

  const addGlitchEffect = (char: string): string => {
    let glitched = char;
    
    for (let i = 0; i < intensity; i++) {
      if (Math.random() < 0.5) {
        glitched += zalgoMarks.above[Math.floor(Math.random() * zalgoMarks.above.length)];
      }
      if (Math.random() < 0.3) {
        glitched += zalgoMarks.middle[Math.floor(Math.random() * zalgoMarks.middle.length)];
      }
      if (Math.random() < 0.4) {
        glitched += zalgoMarks.below[Math.floor(Math.random() * zalgoMarks.below.length)];
      }
      if (Math.random() < 0.3) {
        glitched += glitchChars[Math.floor(Math.random() * glitchChars.length)];
      }
    }

    if (Math.random() < 0.1 * intensity) {
      glitched = glitched.repeat(Math.floor(Math.random() * 2) + 1);
    }

    return glitched;
  };

  return text.split('').map(addGlitchEffect).join('');
};